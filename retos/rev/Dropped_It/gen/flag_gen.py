add = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x55, 0xfc, 0x8b, 0x45, 0xf8, 0x01, 0xd0, 0x5d, 0xc3 ]
mul = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x45, 0xfc, 0x0f, 0xaf, 0x45, 0xf8, 0x5d, 0xc3 ]
sub = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x45, 0xfc, 0x2b, 0x45, 0xf8, 0x5d, 0xc3 ]
div = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x66, 0x0f, 0xef, 0xc0, 0xf2, 0x0f, 0x2a, 0x45, 0xfc, 0x66, 0x0f, 0xef, 0xc9, 0xf2, 0x0f, 0x2a, 0x4d, 0xf8, 0xf2, 0x0f, 0x5e, 0xc1, 0xf2, 0x0f, 0x5a, 0xc0, 0x5d, 0xc3 ]
mod = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x45, 0xfc, 0x99, 0xf7, 0x7d, 0xf8, 0x89, 0xd0, 0x5d, 0xc3 ]
fib = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xec, 0xc7, 0x45, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xf8, 0x01, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xf4, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf8, 0x01, 0x45, 0xfc, 0x8b, 0x45, 0xf0, 0x89, 0x45, 0xf8, 0x83, 0x45, 0xf4, 0x01, 0x8b, 0x45, 0xf4, 0x3b, 0x45, 0xec, 0x7c, 0xe2, 0x8b, 0x45, 0xfc, 0x5d, 0xc3 ]

keys = [add, mul, sub, div, mod, fib]
fun_len = sum([ len(key) for key in keys ])

## Flag multiplo de la longitud de claves (Ahora mismo 54, multiplo de 6)
flag = "nnctf{y0U_dR0pP3dd_th1ss__!1!}"
seg_size = 5
flag_split = [ flag[i:i+seg_size] for i in range(0, len(flag), seg_size) ]

print(flag_split)

def xor_enc(flag, key):
    enc_seg = bytearray()
    flag_bytes = flag.encode("utf-8")
    for i in range(len(flag_bytes)):
        enc_seg.append(flag_bytes[i] ^ key[i])
        
    return enc_seg

def print_c_str(enc):
    out = "unsigned char flagEnc[] = { "
    for b in enc:
        out += hex(b) + ", "
    
    out += "};"
    
    print(out)
    
def print_fun_lens():
    out = f"int funLengths[{len(keys)}] = "
    out += "{ "
    for key in keys:
        out += f'{len(key)}, '
    
    out += "}"
    
    print(out)

def print_byte_blob():
    size = 0
    out = "unsigned char byteData[] = { "
    for key in keys:
        for i in key:
            out += hex(i) + ", "
            size += 1
            
    out += "}"
    
    print(out)
    
    print(f"int bdLen = {size}")

enc_flag_segs = [ xor_enc(flag_split[i], keys[i]) for i in range(len(keys)) ]

for seg in enc_flag_segs:
    print_c_str(seg)
    
print_fun_lens()
print_byte_blob()