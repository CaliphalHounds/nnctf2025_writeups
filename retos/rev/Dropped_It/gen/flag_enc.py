data = [ 0x55, 0x48, 0x89, 0xe5, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x81, 0xec, 0xd8, 0x00, 0x00, 0x00, 0x48, 0x89, 0xbd, 0x18, 0xff, 0xff, 0xff, 0x48, 0x89, 0xb5, 0x10, 0xff, 0xff, 0xff, 0x48, 0x89, 0xe0, 0x48, 0x89, 0xc6, 0xc7, 0x45, 0x8b, 0x3b, 0x26, 0xea, 0x91, 0xc6, 0x45, 0x8f, 0xef, 0xc7, 0x45, 0x86, 0x2e, 0x31, 0xb9, 0xb0, 0xc6, 0x45, 0x8a, 0xd6, 0xc7, 0x45, 0x81, 0x31, 0x1a, 0xb9, 0x95, 0xc6, 0x45, 0x85, 0xd9, 0xc7, 0x85, 0x7c, 0xff, 0xff, 0xff, 0x66, 0x2c, 0xed, 0xba, 0xc6, 0x45, 0x80, 0xfd, 0xc7, 0x85, 0x77, 0xff, 0xff, 0xff, 0x3d, 0x79, 0xfa, 0x96, 0xc6, 0x85, 0x7b, 0xff, 0xff, 0xff, 0xd6, 0xc7, 0x85, 0x72, 0xff, 0xff, 0xff, 0x0a, 0x69, 0xb8, 0xc4, 0xc6, 0x85, 0x76, 0xff, 0xff, 0xff, 0xf4, 0xc7, 0x45, 0xc0, 0x06, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xbc, 0x05, 0x00, 0x00, 0x00, 0xc7, 0x85, 0x50, 0xff, 0xff, 0xff, 0x14, 0x00, 0x00, 0x00, 0xc7, 0x85, 0x54, 0xff, 0xff, 0xff, 0x13, 0x00, 0x00, 0x00, 0xc7, 0x85, 0x58, 0xff, 0xff, 0xff, 0x12, 0x00, 0x00, 0x00, 0xc7, 0x85, 0x5c, 0xff, 0xff, 0xff, 0x26, 0x00, 0x00, 0x00, 0xc7, 0x85, 0x60, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0xc7, 0x85, 0x64, 0xff, 0xff, 0xff, 0x41, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x45, 0x8b, 0x48, 0x89, 0x85, 0x20, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x45, 0x86, 0x48, 0x89, 0x85, 0x28, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x45, 0x81, 0x48, 0x89, 0x85, 0x30, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x85, 0x7c, 0xff, 0xff, 0xff, 0x48, 0x89, 0x85, 0x38, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x85, 0x77, 0xff, 0xff, 0xff, 0x48, 0x89, 0x85, 0x40, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x85, 0x72, 0xff, 0xff, 0xff, 0x48, 0x89, 0x85, 0x48, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xbc, 0x83, 0xc0, 0x01, 0x48, 0x63, 0xd0, 0x48, 0x83, 0xea, 0x01, 0x48, 0x89, 0x55, 0xb0, 0x48, 0x63, 0xd0, 0x49, 0x89, 0xd4, 0x41, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x63, 0xd0, 0x48, 0x89, 0xd1, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x48, 0x98, 0xba, 0x10, 0x00, 0x00, 0x00, 0x48, 0x83, 0xea, 0x01, 0x48, 0x01, 0xd0, 0xbb, 0x10, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xf3, 0x48, 0x6b, 0xc0, 0x10, 0x48, 0x29, 0xc4, 0x48, 0x89, 0xe0, 0x48, 0x83, 0xc0, 0x00, 0x48, 0x89, 0x45, 0xa8, 0xc7, 0x45, 0xdc, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xd8, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xd4, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x77, 0x01, 0x00, 0x00, 0xc7, 0x45, 0xd0, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x2e, 0x8b, 0x45, 0xd4, 0x0f, 0xaf, 0x45, 0xbc, 0x89, 0xc2, 0x8b, 0x45, 0xd0, 0x01, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x8b, 0x85, 0x18, 0xff, 0xff, 0xff, 0x48, 0x01, 0xd0, 0x0f, 0xb6, 0x08, 0x48, 0x8b, 0x55, 0xa8, 0x8b, 0x45, 0xd0, 0x48, 0x98, 0x88, 0x0c, 0x02, 0x83, 0x45, 0xd0, 0x01, 0x8b, 0x45, 0xd0, 0x3b, 0x45, 0xbc, 0x7c, 0xca, 0x48, 0x8b, 0x55, 0xa8, 0x8b, 0x45, 0xbc, 0x48, 0x98, 0xc6, 0x04, 0x02, 0x00, 0x8b, 0x45, 0xd8, 0x48, 0x63, 0xd0, 0x48, 0x8b, 0x85, 0x10, 0xff, 0xff, 0xff, 0x48, 0x01, 0xd0, 0x48, 0x89, 0x45, 0xa0, 0x83, 0x7d, 0xbc, 0x00, 0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe0, 0x48, 0x89, 0xc7, 0x8b, 0x45, 0xbc, 0x83, 0xc0, 0x01, 0x48, 0x63, 0xd0, 0x48, 0x83, 0xea, 0x01, 0x48, 0x89, 0x55, 0x98, 0x48, 0x63, 0xd0, 0x49, 0x89, 0xd0, 0x41, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x63, 0xd0, 0x49, 0x89, 0xd2, 0x41, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x48, 0x98, 0xba, 0x10, 0x00, 0x00, 0x00, 0x48, 0x83, 0xea, 0x01, 0x48, 0x01, 0xd0, 0xbb, 0x10, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x48, 0xf7, 0xf3, 0x48, 0x6b, 0xc0, 0x10, 0x48, 0x29, 0xc4, 0x48, 0x89, 0xe0, 0x48, 0x83, 0xc0, 0x00, 0x48, 0x89, 0x45, 0x90, 0xc7, 0x45, 0xcc, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x31, 0x48, 0x8b, 0x55, 0xa8, 0x8b, 0x45, 0xcc, 0x48, 0x98, 0x0f, 0xb6, 0x0c, 0x02, 0x8b, 0x45, 0xcc, 0x48, 0x63, 0xd0, 0x48, 0x8b, 0x45, 0xa0, 0x48, 0x01, 0xd0, 0x0f, 0xb6, 0x00, 0x31, 0xc8, 0x89, 0xc1, 0x48, 0x8b, 0x55, 0x90, 0x8b, 0x45, 0xcc, 0x48, 0x98, 0x88, 0x0c, 0x02, 0x83, 0x45, 0xcc, 0x01, 0x8b, 0x45, 0xcc, 0x3b, 0x45, 0xbc, 0x7c, 0xc7, 0xc7, 0x45, 0xc8, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xc4, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x34, 0x48, 0x8b, 0x55, 0x90, 0x8b, 0x45, 0xc4, 0x48, 0x98, 0x0f, 0xb6, 0x04, 0x02, 0x0f, 0xb6, 0xd0, 0x8b, 0x45, 0xd4, 0x48, 0x98, 0x48, 0x8b, 0x8c, 0xc5, 0x20, 0xff, 0xff, 0xff, 0x8b, 0x45, 0xc4, 0x48, 0x98, 0x48, 0x01, 0xc8, 0x0f, 0xb6, 0x00, 0x0f, 0xb6, 0xc0, 0x29, 0xc2, 0x01, 0x55, 0xc8, 0x83, 0x45, 0xc4, 0x01, 0x8b, 0x45, 0xc4, 0x3b, 0x45, 0xbc, 0x7c, 0xc4, 0x83, 0x7d, 0xc8, 0x00, 0x0f, 0x94, 0xc0, 0x0f, 0xb6, 0xc0, 0x01, 0x45, 0xdc, 0x48, 0x89, 0xfc, 0x8b, 0x45, 0xd4, 0x48, 0x98, 0x8b, 0x84, 0x85, 0x50, 0xff, 0xff, 0xff, 0x01, 0x45, 0xd8, 0x83, 0x45, 0xd4, 0x01, 0x8b, 0x45, 0xd4, 0x3b, 0x45, 0xc0, 0x0f, 0x8c, 0x7d, 0xfe, 0xff, 0xff, 0x83, 0x7d, 0xdc, 0x06, 0x0f, 0x94, 0xc0, 0x0f, 0xb6, 0xc0, 0x48, 0x89, 0xf4, 0x48, 0x8d, 0x65, 0xe8, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x5d, 0xc3 ]
print(len(data))
key = "Introduce esa flag sabrosona aqui> ".encode("utf-8")
#key = "\0".encode("utf-8")
enc_data = []

add = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x55, 0xfc, 0x8b, 0x45, 0xf8, 0x01, 0xd0, 0x5d, 0xc3 ]
mul = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x45, 0xfc, 0x0f, 0xaf, 0x45, 0xf8, 0x5d, 0xc3 ]
sub = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x45, 0xfc, 0x2b, 0x45, 0xf8, 0x5d, 0xc3 ]
div = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x66, 0x0f, 0xef, 0xc0, 0xf2, 0x0f, 0x2a, 0x45, 0xfc, 0x66, 0x0f, 0xef, 0xc9, 0xf2, 0x0f, 0x2a, 0x4d, 0xf8, 0xf2, 0x0f, 0x5e, 0xc1, 0xf2, 0x0f, 0x5a, 0xc0, 0x5d, 0xc3 ]
mod = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xfc, 0x89, 0x75, 0xf8, 0x8b, 0x45, 0xfc, 0x99, 0xf7, 0x7d, 0xf8, 0x89, 0xd0, 0x5d, 0xc3 ]
fib = [ 0x55, 0x48, 0x89, 0xe5, 0x89, 0x7d, 0xec, 0xc7, 0x45, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xf8, 0x01, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xf4, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x8b, 0x45, 0xfc, 0x89, 0x45, 0xf0, 0x8b, 0x45, 0xf8, 0x01, 0x45, 0xfc, 0x8b, 0x45, 0xf0, 0x89, 0x45, 0xf8, 0x83, 0x45, 0xf4, 0x01, 0x8b, 0x45, 0xf4, 0x3b, 0x45, 0xec, 0x7c, 0xe2, 0x8b, 0x45, 0xfc, 0x5d, 0xc3 ]

final_data = []
final_data += add + mul + sub + div + mod + fib

for i in range(len(data)):
    final_data.append(data[i] ^ key[i % len(key)])

out = "char encData[] = {"
for byte in final_data:
    out += f'{hex(byte)}, '
out += "};"

print(out)